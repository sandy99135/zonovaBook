{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS, SET_CURRENT_USER } from './type';\nimport setAuthToken from '../setAuthtoken';\nimport jwt_decode from 'jwt-decode';\nimport store from '../store';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('https://sandycuis.herokuapp.com/registercuisinier', user).then(res => {\n    if (res.data.email == 'Email already exists') {\n      localStorage.setItem(\"mail\", \"email existante\");\n    }\n\n    history.push('/login');\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const loginUser = (user, history) => dispatch => {\n  axios.post('https://sandycuis.herokuapp.com/logincuisinier', user).then(res => {\n    // console.log(res.data);\n    const token = res.data.token;\n    localStorage.setItem('jwtToken', res.data.nom);\n    localStorage.setItem('id', res.data.id);\n    console.log(res.data);\n    setAuthToken(token); // const decoded = jwt_decode(token);\n    // dispatch(setCurrentUser(decoded));\n\n    if (res.data.password !== 'Incorrect Password') {\n      localStorage.setItem('login', true);\n      window.location = '/profil';\n    } else {\n      localStorage.setItem('login', \"Mot de passe Incorrect\");\n      setTimeout(() => {\n        alert(\"mot de passe incorrect\");\n      }, 3000);\n    } // if(localStorage.jwtToken) {\n    //       setAuthToken(localStorage.jwtToken);\n    //       const decoded = jwt_decode(localStorage.jwtToken);\n    //       store.dispatch(setCurrentUser(decoded));\n    //       const currentTime = Date.now() / 1000;\n    //       if(decoded.exp < currentTime) {\n    //         store.dispatch(loginUser());\n    //         window.location.href = '/'\n    //       } \n    //     }\n\n  }); // .catch(err => {\n  //     dispatch({\n  //         type: GET_ERRORS,\n  //         payload: err.response.data\n  //     });\n  // });\n};\nexport const logoutUser = history => dispatch => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('id');\n  localStorage.removeItem('login');\n  localStorage.setItem('login', \"Mot de passe Incorrect\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  history.push('/login');\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/home/dev/Bureau/montest/front/src/actions/authentificate.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","setAuthToken","jwt_decode","store","registerUser","user","history","dispatch","post","then","res","data","email","localStorage","setItem","push","catch","err","type","payload","response","loginUser","token","nom","id","console","log","password","window","location","setTimeout","alert","logoutUser","removeItem","setCurrentUser","decoded"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAoBC,gBAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmBC,QAAQ,IAAI;AACvDT,EAAAA,KAAK,CAACU,IAAN,CAAW,mDAAX,EAAgEH,IAAhE,EACSI,IADT,CACcC,GAAG,IAAI;AACT,QAAGA,GAAG,CAACC,IAAJ,CAASC,KAAT,IAAiB,sBAApB,EAA2C;AACvCC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA4B,iBAA5B;AACH;;AACDR,IAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AAAuB,GALnC,EAMSC,KANT,CAMeC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEnB,UADD;AAELoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFjB,KAAD,CAAR;AAIH,GAXT;AAYH,CAbM;AAeP,OAAO,MAAMU,SAAS,GAAG,CAAChB,IAAD,EAAMC,OAAN,KAAkBC,QAAQ,IAAI;AACnDT,EAAAA,KAAK,CAACU,IAAN,CAAW,gDAAX,EAA6DH,IAA7D,EACSI,IADT,CACcC,GAAG,IAAI;AACT;AADS,UAEDY,KAFC,GAESZ,GAAG,CAACC,IAFb,CAEDW,KAFC;AAGTT,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCJ,GAAG,CAACC,IAAJ,CAASY,GAA1C;AACAV,IAAAA,YAAY,CAACC,OAAb,CAAqB,IAArB,EAA2BJ,GAAG,CAACC,IAAJ,CAASa,EAApC;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAG,CAACC,IAAhB;AACAV,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CAPS,CAQT;AACA;;AACA,QAAGZ,GAAG,CAACC,IAAJ,CAASgB,QAAT,KAAqB,oBAAxB,EACA;AACId,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,IAA9B;AACFc,MAAAA,MAAM,CAACC,QAAP,GAAgB,SAAhB;AACF,KAJA,MAKG;AACHhB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,wBAA9B;AACGgB,MAAAA,UAAU,CAAC,MAAI;AAACC,QAAAA,KAAK,CAAC,wBAAD,CAAL;AAAgC,OAAtC,EAAuC,IAAvC,CAAV;AAAuD,KAjBjD,CAkBT;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEH,GA/BT,EADmD,CAiC3C;AACA;AACA;AACA;AACA;AACA;AACX,CAvCM;AAwCP,OAAO,MAAMC,UAAU,GAAI1B,OAAD,IAAaC,QAAQ,IAAI;AAC/CM,EAAAA,YAAY,CAACoB,UAAb,CAAwB,UAAxB;AACApB,EAAAA,YAAY,CAACoB,UAAb,CAAwB,IAAxB;AACApB,EAAAA,YAAY,CAACoB,UAAb,CAAwB,OAAxB;AACApB,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,wBAA9B;AACAb,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,EAAAA,QAAQ,CAAC2B,cAAc,CAAC,EAAD,CAAf,CAAR;AACA5B,EAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACH,CARM;AASP,OAAO,MAAMmB,cAAc,GAAGC,OAAO,IAAI;AACrC,SAAO;AACHjB,IAAAA,IAAI,EAAElB,gBADH;AAEHmB,IAAAA,OAAO,EAAEgB;AAFN,GAAP;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS,SET_CURRENT_USER } from './type';\nimport setAuthToken from '../setAuthtoken';\nimport jwt_decode from 'jwt-decode';\nimport store from '../store';\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('https://sandycuis.herokuapp.com/registercuisinier', user)\n            .then(res => {\n                if(res.data.email== 'Email already exists'){\n                    localStorage.setItem(\"mail\",\"email existante\")\n                }\n                history.push('/login')})\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: err.response.data\n                });\n            });\n}\n\nexport const loginUser = (user,history) => dispatch => {\n    axios.post('https://sandycuis.herokuapp.com/logincuisinier', user)\n            .then(res => {\n                // console.log(res.data);\n                const { token } = res.data;\n                localStorage.setItem('jwtToken', res.data.nom);\n                localStorage.setItem('id', res.data.id);\n                \n                console.log(res.data)\n                setAuthToken(token);\n                // const decoded = jwt_decode(token);\n                // dispatch(setCurrentUser(decoded));\n                if(res.data.password!== 'Incorrect Password')\n                {\n                    localStorage.setItem('login', true);\n                  window.location='/profil';\n               }\n               else{\n                localStorage.setItem('login', \"Mot de passe Incorrect\");\n                   setTimeout(()=>{alert(\"mot de passe incorrect\")},3000)}\n                // if(localStorage.jwtToken) {\n                //       setAuthToken(localStorage.jwtToken);\n                //       const decoded = jwt_decode(localStorage.jwtToken);\n                //       store.dispatch(setCurrentUser(decoded));\n                    \n                //       const currentTime = Date.now() / 1000;\n                //       if(decoded.exp < currentTime) {\n                //         store.dispatch(loginUser());\n                //         window.location.href = '/'\n                //       } \n                //     }\n                \n            })\n            // .catch(err => {\n            //     dispatch({\n            //         type: GET_ERRORS,\n            //         payload: err.response.data\n            //     });\n            // });\n}\nexport const logoutUser = (history) => dispatch => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('id');\n    localStorage.removeItem('login');\n    localStorage.setItem('login', \"Mot de passe Incorrect\");\n    setAuthToken(false);\n    dispatch(setCurrentUser({}));\n    history.push('/login');\n}\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}"]},"metadata":{},"sourceType":"module"}